document = { line };

line = [ node | comment ] , lf;

inline_node =
    type ,
    [ whitespace , id ] ,
    [ whitespace , class_list ] ,
    [ whitespace , attr_list ];

node = ? depth + 1 ? ,
    type ,
    [ whitespace , '@' , id ] ,
    [ whitespace , class_list ] ,
    [ whitespace , ( attr_list | multiline_attrs ) ] ,
    [ ( inline_children | children | content ) ] ,
    lfc , ? depth - 1 ?;

type = atom;

id = atom;

class_list = { '.' , class };

class = atom;

multiline_attrs = '[' , lfc, ? depth + 1 ? ,
                  { attr_list , lfc , [ ? depth ? ] } ,
                  ? depth - 1 ? , ']';

attr_list = { attribute , whitespace };

attribute = key , [ whitespace ] , '=' , [ whitespace ] , value;

key = atom;

value = atom | string;

children = { node , lfc };

inline_children = whitespace , '{' , { inline_node , whitespace } , '}';

content = inline_content | nextline_content;

inline_content = whitespace , '~' , whitespace , ? .* ?;

nextline_content = '~' , lfc , ? depth + 1 ?
                   { ? .*$ ?, lfc } ,
                   ? depth - 1 ?;

string = ('"' , ? [^"\n]* ? , '"')
       | ("'" , ? [^'\n]* ? , "'");

atom = ? [a-z_][a-z0-9_-]* ?;

lfc = lf | comment;

comment = [ whitespace ] , '#' , ? .* ? , lf;

whiteorlf = { whitespace | lf };

whitespace = { ' ' | '\t' };

lf = '\n';

(*

`depth` is defined as a number of whitespaces which is initially zero, and
increments when `depth + 1` is encountered and decrements when `depth - 1` is
encountered. `depth +/- 1` operations evaluate before being used, thus if the
depth is 1 and you encounter `depth + 1`, you should increment depth and expect
two whitespaces. All documents must use EITHER ' ' or '\t' for the whitespace
used in depth matches throughout the entire document.

Other ? ? matches are given in terms of regular expressions.

*)
